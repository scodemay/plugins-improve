# 资源压力测试
# 创建高资源需求的 Pod，测试在资源紧张情况下的调度表现

apiVersion: apps/v1
kind: Deployment
metadata:
  name: resource-pressure-cpu
  namespace: perf-test
  labels:
    test-scenario: resource-pressure
spec:
  replicas: 5
  selector:
    matchLabels:
      app: resource-pressure-cpu
  template:
    metadata:
      labels:
        app: resource-pressure-cpu
        pressure-type: cpu
    spec:
      schedulerName: rescheduler-scheduler
      containers:
      - name: cpu-pressure
        image: busybox:latest
        command: ["sh", "-c"]
        args:
        - |
          echo "=== CPU 资源压力测试开始 ==="
          echo "Pod: $HOSTNAME"
          echo "请求 CPU: 500m, 限制 CPU: 800m"
          echo "开始时间: $(date)"
          
          # 持续高强度 CPU 使用
          while true; do
            echo "$(date): 执行 CPU 密集型任务..."
            
            # 并行执行多个 CPU 密集型任务
            (
              for i in $(seq 1 200); do
                echo "$RANDOM$(date +%N)$i" | md5sum | sha256sum > /dev/null
              done
            ) &
            
            (
              for i in $(seq 1 200); do
                expr $RANDOM \* $RANDOM \* $RANDOM > /dev/null
              done
            ) &
            
            # 等待并行任务完成
            wait
            
            # 短暂休息
            sleep 1
          done
        resources:
          requests:
            cpu: 500m
            memory: 128Mi
          limits:
            cpu: 800m
            memory: 256Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: resource-pressure-memory
  namespace: perf-test
  labels:
    test-scenario: resource-pressure
spec:
  replicas: 4
  selector:
    matchLabels:
      app: resource-pressure-memory
  template:
    metadata:
      labels:
        app: resource-pressure-memory
        pressure-type: memory
    spec:
      schedulerName: rescheduler-scheduler
      containers:
      - name: memory-pressure
        image: busybox:latest
        command: ["sh", "-c"]
        args:
        - |
          echo "=== 内存资源压力测试开始 ==="
          echo "Pod: $HOSTNAME"
          echo "请求内存: 256Mi, 限制内存: 512Mi"
          echo "开始时间: $(date)"
          
          mkdir -p /tmp/memory-pressure
          counter=0
          max_blocks=40  # 最大 40 个 10MB 块 = 400MB
          
          while true; do
            counter=$((counter + 1))
            current_blocks=$(ls /tmp/memory-pressure/ 2>/dev/null | wc -l)
            
            echo "$(date): 当前内存块数: $current_blocks"
            
            # 如果还没达到最大值，继续分配内存
            if [ $current_blocks -lt $max_blocks ]; then
              echo "分配新的内存块: block$counter"
              dd if=/dev/zero of=/tmp/memory-pressure/block$counter bs=1M count=10 2>/dev/null
            else
              # 随机释放一个旧块，分配新块（模拟内存流转）
              old_block=$(ls /tmp/memory-pressure/ | head -1)
              if [ -n "$old_block" ]; then
                rm -f /tmp/memory-pressure/$old_block
                echo "释放旧内存块: $old_block"
              fi
              dd if=/dev/zero of=/tmp/memory-pressure/block$counter bs=1M count=10 2>/dev/null
              echo "分配新内存块: block$counter"
            fi
            
            sleep 3
          done
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 200m
            memory: 512Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: resource-pressure-mixed
  namespace: perf-test
  labels:
    test-scenario: resource-pressure
spec:
  replicas: 6
  selector:
    matchLabels:
      app: resource-pressure-mixed
  template:
    metadata:
      labels:
        app: resource-pressure-mixed
        pressure-type: mixed
    spec:
      schedulerName: rescheduler-scheduler
      containers:
      - name: mixed-pressure
        image: busybox:latest
        command: ["sh", "-c"]
        args:
        - |
          echo "=== 混合资源压力测试开始 ==="
          echo "Pod: $HOSTNAME"
          echo "请求 CPU: 300m, 内存: 192Mi"
          echo "限制 CPU: 600m, 内存: 384Mi"
          echo "开始时间: $(date)"
          
          mkdir -p /tmp/mixed-load
          counter=0
          
          while true; do
            counter=$((counter + 1))
            echo "$(date): 混合负载循环 $counter"
            
            # CPU + 内存混合负载
            (
              # CPU 密集型任务
              for i in $(seq 1 50); do
                echo "$RANDOM$(date +%N)" | md5sum > /dev/null
              done
            ) &
            
            # 内存操作
            dd if=/dev/zero of=/tmp/mixed-load/temp$counter bs=1M count=5 2>/dev/null
            
            # 等待 CPU 任务完成
            wait
            
            # 清理临时文件
            rm -f /tmp/mixed-load/temp$counter
            
            sleep 5
          done
        resources:
          requests:
            cpu: 300m
            memory: 192Mi
          limits:
            cpu: 600m
            memory: 384Mi
---
# 资源监控 Pod（用于观察资源使用情况）
apiVersion: apps/v1
kind: Deployment
metadata:
  name: resource-monitor
  namespace: perf-test
  labels:
    test-scenario: resource-pressure
spec:
  replicas: 1
  selector:
    matchLabels:
      app: resource-monitor
  template:
    metadata:
      labels:
        app: resource-monitor
        role: monitor
    spec:
      schedulerName: rescheduler-scheduler
      containers:
      - name: monitor
        image: busybox:latest
        command: ["sh", "-c"]
        args:
        - |
          echo "=== 资源监控开始 ==="
          echo "Pod: $HOSTNAME"
          echo "开始时间: $(date)"
          
          while true; do
            echo "==================== $(date) ===================="
            echo "系统信息:"
            echo "- 负载: $(cat /proc/loadavg 2>/dev/null || echo '无法获取')"
            echo "- 内存: $(free -m 2>/dev/null | grep Mem || echo '无法获取内存信息')"
            echo "- 磁盘: $(df -h / 2>/dev/null | tail -1 || echo '无法获取磁盘信息')"
            echo "- 进程: $(ps aux 2>/dev/null | wc -l || echo '无法获取进程信息') 个进程"
            echo "=================================================="
            
            sleep 60
          done
        resources:
          requests:
            cpu: 10m
            memory: 32Mi
          limits:
            cpu: 50m
            memory: 64Mi




